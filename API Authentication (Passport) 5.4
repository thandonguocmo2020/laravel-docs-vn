#API Authentication (Passport)

- [Introduction]
- [Installation]
- [Frontend Quickstart]
- [Configuration]
- [Token Lifetimes]
- [Issuing Access Tokens]
- [Managing Clients]
- [Requesting Tokens]
- [Refreshing Tokens]
- [Password Grant Tokens]
- [Creating A Password Grant Client]
- [Requesting Tokens]
- [Requesting All Scopes]
- [Implicit Grant Tokens]
- [Client Credentials Grant Tokens]
- [Personal Access Tokens]
- [Creating A Personal Access Client]
- [Managing Personal Access Tokens]
- [Protecting Routes]
- [Via Middleware]
- [Passing The Access Token]
- [Token Scopes]
- [Defining Scopes]
- [Assigning Scopes To Tokens]
- [Checking Scopes]
- [Consuming Your API With JavaScript]
- [Events]
- [Testing]

Introduction => Giới thiệu 

Laravel already makes it easy to perform authentication via traditional login forms, but what about APIs? APIs typically use tokens to authenticate users and do not maintain session state between requests. Laravel makes API authentication a breeze using Laravel Passport, which provides a full OAuth2 server implementation for your Laravel application in a matter of minutes. Passport is built on top of the League OAuth2 server that is maintained by Alex Bilbie.

This documentation assumes you are already familiar with OAuth2. If you do not know anything about OAuth2, consider familiarizing yourself with the general terminology and features of OAuth2 before continuing.

Dịch 

"Laravel đã làm cho việc thực hiện xác thực qua các hình thức đăng nhập truyền thống rất dễ dàng.

API thường sử dụng mã để xác thực người dùng và không duy trì trạng thái phiên giữa các request. Laravel làm cho việc xác thực API trở nên dễ dàng bằng cách sử dụng Laravel Passport.

 Cung cấp việc triển khai máy chủ OAuth2 hoàn chỉnh cho ứng dụng Laravel." Chỉ 1 vài phút...
 

Installation

"Cài đặt Passport qua trình quản lý gói nhạc Composer". 

```
  composer require laravel/passport

```
Tiếp theo, đăng ký nhà cung cấp dịch vụ Passport trong providers mảng cấu hình file config/app.php của bạn:

``` 
    Laravel\Passport\PassportServiceProvider::class,
    
```

Passport service provider đăng ký các database migration trong thư mục riêng của framework. Vì vậy ngay sau khi đăng ký dịch vụ bạn chạy lệnh để tạo databse riêng của mình

``` 
  php artisan migrate
```

Nếu bạn không muốn sử dụng mifrations default của Passports bạn có thể gọi   Passport::ignoreMigrations();  phương pháp trong 

register method của  AppServiceProvider. Để gọi được nó bạn nhớ dùng use Laravel\Passport\Passport; ở đầu file AppServiceProvider 
từ đó bạn có thể export các databse mặc định bằng câu lệnh sau để xem hoặc thay đổi databse mặc định

``` 
php artisan vendor:publish --tag=passport-migrations.

```

Lúc này tất cả các databse là trống khi đã chạy *php artisan migrate*

Tiếp theo bạn cần chạy lệnh để tạo ra các khóa mã hóa cần thiết để tạo ra access tokens. "Chuỗi kí tự mã hóa" trường serect trong oauth_client.

```
php artisan passport:install

```` 
Nhìn vào databse vừa tạo ra ta thấy Laravel Personal Access Client và Laravel Password Grant Client và serect tương ứng.

Từ giờ coi passport là một máy chủ và Laravel Personal Access Client là người dùng truy cập client để lấy token.

 Laravel Password Grant Client ==> là ứng dụng hiện tại đang viết để lấy token từ passport. Hiểu nó chính là ứng dụng của bạn khi user nó là  null ==> root.
 
 ứng dụng đầu tiên của máy chủ cấp token. 


Sau khi chạy lệnh trên tiếp đến thêm vào class App\User người sử dụng mà sẽ thực hiện lấy token. App\User model. 

Thêm vào trait  Laravel\Passport\HasApiTokens

```<?php

namespace App;

use Laravel\Passport\HasApiTokens;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use HasApiTokens, Notifiable;
}


Tiếp theo cần khai báo route của máy chủ Passport với đoạn Passport::routes(); trong method boot của  AuthServiceProvider.

Phương pháp này cần thiết để đăng ký các tuyến đường như đăn ký ứng dụng để được phép phát hành thẻ token. Hoặc thu hồi các thẻ truy cập.

Hoặc Đăng ký Token Của Client Cá nhân. "client cá nhân là các ứng dụng khác mà sử dụng ứng dụng có chứa passport của bạn" muốn đăng ký để phát 
hành thẻ token.


```<?php

namespace App\Providers;

use Laravel\Passport\Passport;
use Illuminate\Support\Facades\Gate;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array
     */
    protected $policies = [
        'App\Model' => 'App\Policies\ModelPolicy',
    ];

    /**
     * Register any authentication / authorization services.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerPolicies();

        Passport::routes();
    }
}
```
Cuối cùng, trong tệp cấu hình của bạn , bạn nên đặt tùy chọn của trình bảo vệ xác thực . Điều này sẽ hướng dẫn ứng dụng của bạn sử dụng passport

để xác thực người dùng. Và phát hành token api.

```
'guards' => [
    'web' => [
        'driver' => 'session',
        'provider' => 'users',
    ],

    'api' => [
        'driver' => 'passport',
        'provider' => 'users',
    ],
],

```

Frontend Quickstart

Tạo frontend nhanh 

Để sử dụng các thành phần Passport Vue, bạn phải sử dụng khuôn khổ JavaScript Vue . 
Các thành phần này cũng sử dụng khung công tác Bootstrap CSS. Tuy nhiên, ngay cả khi bạn không sử dụng những công cụ này,
các thành phần này sẽ đóng vai trò là một tài liệu tham khảo có giá trị cho việc triển khai phần đầu của bạn.


Để sử dụng vue các bạn chỉ cần đơn giản là chạy mix trong laravel bằng lệnh của để cài đặt môi trường cho javascript trong module nodejs

```
npm install 

```

Nhìn vào package.json file bạn thấy các lệnh script sau đó bạn có thể chạy lệnh 

``` 

npm run watch-poll

``` 

Để xuất bản các thành phần Passport Vue, sử dụng  lệnh command :

```
php artisan vendor:publish --tag=passport-components

```
Các thành phần được xuất bản sẽ được đặt trong thư mục của bạn resources/assets/js/components directory.

Một khi các thành phần đã được xuất bản, bạn nên đăng ký chúng trong tệp của bạn resources/assets/js/app.js file:

Lém nó vào vùng sau 

```
const app = new Vue({
    el: '#app'
});


Vue.component(
    'passport-clients',
    require('./components/passport/Clients.vue')
);

Vue.component(
    'passport-authorized-clients',
    require('./components/passport/AuthorizedClients.vue')
);

Vue.component(
    'passport-personal-access-tokens',
    require('./components/passport/PersonalAccessTokens.vue')
);


```

Chạy lại lệnh npm run watch-poll nếu bạn đã tắt lệnh này.

Sau đó bạn có thể sử dụng các thẻ tags element của vue trong html có chứa file app.js.

Mặc định npm run watch-poll sẽ buid nó từ file webpack.mix.js đến vị trí tương ứng.
Coppy các tags sau vào vùng html tương ứng có chứa app.js vừa  "đóng gói" bunding.

```
<passport-clients></passport-clients>
<passport-authorized-clients></passport-authorized-clients>
<passport-personal-access-tokens></passport-personal-access-tokens>

```

Như vậy view đã chuẩn bị cho việc các client đăng ký để phát hành thẻ token cho người dùng của họ. 
Tiếp đến chúng ta cần Config cách token được phát hành trong passport.

Configuration

Quá trình cấu hình thẻ token

***Tuổi Thọ Thời GIAN DÙNG CỦA THẺ TOKEN ***

Theo mặc định, Passport phát hành thẻ truy cập lâu dài mà không bao giờ cần phải làm mới.
Nếu bạn muốn định cấu hình thời gian sử dụng token ngắn hơn, bạn có thể sử dụng phương thức  *tokensExpireIn* và *refreshTokensExpireIn* 
phương pháp.  Những phương pháp này nên được gọi từ  bootphương pháp của bạn AuthServiceProvider:



```<php
use Carbon\Carbon;

/**
 * Register any authentication / authorization services.
 *
 * @return void
 */
public function boot()
{
    $this->registerPolicies();

    Passport::routes();

    Passport::tokensExpireIn(Carbon::now()->addDays(15));

    Passport::refreshTokensExpireIn(Carbon::now()->addDays(30));
}

```

Issuing Access Tokens

CÁCH NÓ ĐƯỢC PHÁT HÀNH

Sử dụng OAuth2 với mã ủy quyền là cách mà hầu hết các nhà phát triển đều quen thuộc với OAuth2. Khi sử dụng mã uỷ quyền,

Một ứng dụng khác người dùng mà đã đăng ký ứng dụng Client với máy chủ ứng dụng của bạn. Sẽ chuyển hướng người dùng truy cập client của họ

chuyển hướng tới máy chủ của bạn. Nơi mà họ được hỏi rằng đồng ý hoặc từ chối việc yêu cầu máy chủ phát hành một mã token thông báo truy cập tới 

client chuyển hướng tới.


Quản Lý người dùng đã đăng ký Client.


Thứ nhất, các nhà phát triển xây dựng ứng dụng cần tương tác với các đường dẫn API passport mà có trong ứng dụng của bạn.
Họ cần đăng ký ứng dụng của họ với ứng dụng của bạn bằng cách tạo ra một "client". 

Thông thường việc này cần cung cấp name của ứng dụng và uri gọi lại xử lý sau khi client chuyển hướng người dùng tới ứng dụng của bạn  

điều này cho biết người dùng có trên hệ thống của bạn có cho phép hay không cho phép client đó có quyền lấy thẻ token mà do họ phát hành.

Thẻ được chia 2 loại 1 do người dùng cấp phép và 1 do người đăng ký client lấy token.

Bạn có thể thấy trong bảng oauth_clients => có user_id => name nơi mà giải thích rõ ai là người truy cập ứng dụng và cấp token và ai là người đăng ký client để
có được token.

First, developers building applications that need to interact with your application's API will need to register their application with yours by creating a "client". Typically, this consists of providing the name of their application and a URL that your application can redirect to after users approve their request for authorization.

** Các Lệnh passport:client Command **

==> Lệnh này tạo ra các client mà chuyển hướng người dùng đến máy chủ của bạn để hỏi cấp thẻ token.

Cách đơn giản nhất để tạo một máy khách là sử dụng lệnh Artisan

Lệnh này có thể được sử dụng để tạo ra các Client là của chính bạn để thử nghiệm chức năng OAuth2 trên máy chủ của bạn.

Khi bạn chạy lệnh passport sẽ nhắc nhở bạn như nhập tên client và uri chuyển hướng để test OAUTH2.

Bạn cần nhập vào user_id của người dùng và tên để bạn test thử.

```
php artisan passport:client

```

###API JSON


Vì người dùng ứng dụng của bạn họ không thể chạy lệnh artisan họ cần một giao diện đồ họa để đăng ký ứng dụng của họ. 

Passport cung cấp 1 loạt các route API mà return chuỗi json mà bạn có thể dùng nó để tạo client.

Điều này hạn chế bug khi phải tự kiểm soát mã cho việc tạo, cập nhật và xóa các máy Client.


Tuy nhiên, Bạn sẽ cần phải ghép nối API JSON của Passport với ứng dụng giao diện đồ họa của bạn để cho người dùng có thể đăng ký CLient.


Dưới đây là 1 số điểm kết nối của API để quản lý khách hàng. Để thuận tiện chúng tôi sẽ sử dụng Axios để ví dụ chạy vào các route API chức năng.


``
Nếu bạn không muốn thực hiện toàn bộ giao diện đồ họa quản lý khách hàng, 

bạn có thể sử dụng lối trình bày nhanh Front-end QuickStart đã cung cấp  chỉ trong vài phút. Trước khi có lối trình diễn đầy đủ 

Các điểm cuối đường dẫn tuyến đường APi sẽ là :

```
GET /oauth/clients


POST /oauth/clients

PUT /oauth/clients/{client-id}

DELETE /oauth/clients/{client-id}

```



If you don't want to implement the entire client management frontend yourself, you can use the frontend quickstart to have a fully functional frontend in a matter of minutes.

*GET /oauth/clients*

Route này chả lại tất cả các clients của người dùng để họ có thể dễ dàng chỉnh sửa hoặc xóa chúng:

``` 
   axios.get('/oauth/clients')
     .then(response => {
         console.log(response.data);
     });
    
 ```  
*POST /oauth/clients*

Route này được sử dụng để tạo ra các new clients. Nó đòi hỏi hai trường dữ liệu là name client và 1 URL redirect sau khi ủy quyền được thoog qua.

URL là nơi người dùng sẽ được chuyển hướng sau khi phê duyệt hoặc từ chối một yêu cầu cho phép.

```
const data = {
    name: 'Client Name',
    redirect: 'http://example.com/callback'
};

axios.post('/oauth/clients', data)
    .then(response => {
        console.log(response.data);
    })
    .catch (response => {
        // List errors on response...
    });
   ``` 
    
*PUT /oauth/clients/{client-id}*

Đây là route để cập nhập thông tin của client 

```
const data = {
    name: 'New Client Name',
    redirect: 'http://example.com/callback'
};

axios.put('/oauth/clients/' + clientId, data)
    .then(response => {
        console.log(response.data);
    })
    .catch (response => {
        // List errors on response...
    });
    
 ```
 
 
*DELETE /oauth/clients/{client-id}*

Đây là route để của người dùng để delete client.


```
axios.delete('/oauth/clients/' + clientId)
    .then(response => {
        //
    });
    
```


*Requesting Tokens*

Yêu cầu lấy Tokens của người dùng ủy quyền 

Chuyển hướng đến quá trình xác thực

Khi các client của họ được tạo. Các DEVELOPER của các client có thể sử dụng các ID và KHóa Secret để yêu cầu thẻ token từ người dùng của họ.

Ứng dụng client sẽ phải tạo ra  một yêu cầu chuyển hướng đến tuyến đường passport cấp token có trên máy chủ của bạn.

Tuyến đường này */oauth/authorize*
```

Route::get('/redirect', function () {
    $query = http_build_query([
        'client_id' => 'client-id',
        'redirect_uri' => 'http://example.com/callback',
        'response_type' => 'code',
        'scope' => '',
    ]);

    return redirect('http://your-app.com/oauth/authorize?'.$query);
});
```

Các tuyến đường này được tạo ra  bằng  Passport::routes method. Mà trước đó đã định nghĩa.



#Approving The Request => Chấp nhận các request từ client gửi lên.

Khi nhận yêu cầu từ request máy chủ Passport của bạn sẽ tự động hiển thị giao diện Teamplate để người dùng cho phép họ chấp thuận hoặc từ chối yêu cầu ủy quyền.

Nếu quá trình được chấp nhận, họ sẽ được chuyển hướng trở lại với URL redirect_uri được xác định đăng ký bởi client ứng dụng.

Khi client đã đăng ký được tạo ra.

Nếu bạn muốn tạo tự động template để người dùng phê duyệt chấp thuận hoặc không dùng câu lệnh :

````
php artisan vendor:publish --tag=passport-views

```


#Converting Authorization Codes To Access Tokens => 

Chuyển từ thẻ ủy quyền sang thẻ truy cập. token đổi access_token

Nếu người dùng chấp nhận yêu cầu ủy quyền, họ sẽ được chuyển hướng trở lại ứng dụng với uri yêu cầu.

Sau đó ứng dụng đó phải phát ra một yêu cầu với POST request đến ứng dụng máy chủ để đổi mã ủy quyền "token" lấy access token "thẻ truy cập"

Lưu ý các yêu cầu phải có thẻ token thẻ ủy quyền được phát hành từ Passport máy chủ trước đó. 

Đây là một ví dụ nữa khi request gửi post method với  Guzzle HTTP thư viện của php. có thể là ứng dụng laravel phiá client.

```

Route::get('/callback', function (Request $request) {
    $http = new GuzzleHttp\Client;

    $response = $http->post('http://your-app.com/oauth/token', [
        'form_params' => [
            'grant_type' => 'authorization_code',
            'client_id' => 'client-id',
            'client_secret' => 'client-secret',
            'redirect_uri' => 'http://example.com/callback',
            'code' => $request->code,
        ],
    ]);

    return json_decode((string) $response->getBody(), true);
});

```

Đoạn này khá quan trọng : Đây là một tuyến đường mà sẽ trả về truy cập là một chuỗi JSON phản ứng có chứa thẻ truy cập, thời gian truy cập hết hạn,
và thẻ làm mới thẻ truy cập. Route */oauth/token* access_token, refresh_token, and  expires_in thuộc tính. 

Thuộc tính expires_in chứa số giây cho đến khi mã thông báo truy cập hết hạn.

Cũng giống như /oauth/authorize, /oauth/token là tuyến đường tự định nghĩa được sử dụng bởi Passport::routes method.


#Refreshing Tokens => Làm mới thẻ truy cập.

Nếu ứng dụng máy chủ của bạn cung cấp access_token có thời gian truy cập ngắn. Người dùng client đăng ký phải gửi thẻ refresh_token để 
làm mới thẻ access_token mà chuẩn bị hết thời hạn sử dụng hoặc đã hết hạn. 

Trong ví dụ này, chúng ta sẽ sử dụng thư viện Guzzle HTTP người dùng client cần để làm mới mã thông báo:
```
$http = new GuzzleHttp\Client;

$response = $http->post('http://your-app.com/oauth/token', [
    'form_params' => [
        'grant_type' => 'refresh_token',
        'refresh_token' => 'the-refresh-token',
        'client_id' => 'client-id',
        'client_secret' => 'client-secret',
        'scope' => '',
    ],
]);

return json_decode((string) $response->getBody(), true);

```

Tuyến đường trên máy chủ của chúng ta sẽ phả ứng lại một chuỗi json có chứa access_token, refresh_token, and  expires_in attributes.

/oauth/token access_token ,refresh_token,expires_in.



#Password Grant Tokens

Dùng mật khẩu để đổi token. Cơ chế này dùng cho ứng dụng ko yêu cầu thẻ ủy quyền. 

Cơ chế này để nhận được thẻ token chỉ cần cung cấp địa chỉ email hoặc username và mật khẩu là bắt buộc để đổi lấy thẻ token.

Điều này cho phép bạn phát hành mã bảo mật  access_token 1 cách an toàn. Cho các người dùng trực tiếp máy chủ của bạn.  

mà không yêu cầu người dùng truy cập toàn bộ luồng chuyển hướng của ủy quyền OAuth2


#Creating A Password Grant Client

Tạo Người Dùng Cấp Phép Bằng Mật khẩu. 

Trước khi ứng dụng của bạn tiến hành phát hành thẻ token thông qua password. Bạn cần đăng ký 1 password grant client. 1 tài khoản 
client. 
Client ở đây hiểu là mỗi là người dùng chỉ cần 1 lần đăng nhập sẽ có mã token. Nếu mã này là vĩnh viến có thể dùng nó mãi mãi. Nếu có time thì thỉnh thoảng phải làm mới.

Nên hiểu nó là client sẽ tốt hơn. Bạn có thể đăng ký  làm điều này bằng cách sử dụng lệnh với tùy chọn với cờ --password.

 passport:client --password tùy chọn.
 
 Nếu bạn đã sử dụng  passport:install command, bạn không cần phải thực hiện lệnh này. 

```
  php artisan passport:client --password
```

Muốn lấy thẻ token thì phải làm sao ?

#Requesting Tokens


Sau khi bạn đã tạo ra client sử dụng password để đổi token bạn có thể yêu cầu access token bằng cách gửi 1 request POST tới

 /oauth/token trong route này phải có chứa địa chỉ email và  password. và hãy ghi nhớ các tuyến đường này đã được tạo bởi Passport. 
 
 Passport::routes() đã định nghĩa trước đó. 
 
 Nếu request thành công bạn sẽ nhận được một và trong phản ứng JSON từ máy chủ sẽ chứa /oauth/tokenPassport::routesaccess_tokenrefresh_token

Từ client bạn có một điều gì đó như vậy
```

$http = new GuzzleHttp\Client;

$response = $http->post('http://your-app.com/oauth/token', [
    'form_params' => [
        'grant_type' => 'password',
        'client_id' => 'client-id',
        'client_secret' => 'client-secret',
        'username' => 'taylor@laravel.com',
        'password' => 'my-password',
        'scope' => '',
    ],
]);

return json_decode((string) $response->getBody(), true);

``` 

Hãy nhớ rằng, các token truy cập được tồn tại lâu dài theo cấu hình máy chủ mặc định. 

Tuy nhiên, bạn được tự do định cấu hình thời gian truy cập tối đa của thẻ nếu cần.


#Requesting All Scopes

Yêu cầu tất cả các phạm vi 

Bạn có thể ủy quyền cho token để truy cập tất cả các phạm vi tài nguyên được hỗ trợ bởi ứng dụng.

Nếu có  'scope' => '`*`'  trong reuqets các can method sẽ luôn trả về bằng true.

Scope này chỉ có thể được gán cho một mã thông báo được phát hành bằng cách sử dụng password.

```
$response = $http->post('http://your-app.com/oauth/token', [
    'form_params' => [
        'grant_type' => 'password',
        'client_id' => 'client-id',
        'client_secret' => 'client-secret',
        'username' => 'taylor@laravel.com',
        'password' => 'my-password',
        'scope' => '*',
    ],
]);

```

#Implicit Grant Tokens

Thẻ truy cập được cấp ngầm định mà không cần được ủy quyền cho phép. 

Cách này được sử dụng phổ biến nhất cho các ứng dụng JavaScript hoặc điện thoại di động mà không thể đảm bảo được an toàn.

Để kích hoạt gọi *enableImplicitGrant* method trong  AuthServiceProvider của bạn:

```<?php
/**
 * Register any authentication / authorization services.
 *
 * @return void
 */
public function boot()
{
    $this->registerPolicies();

    Passport::routes();

    Passport::enableImplicitGrant();
}

```

Once a grant has been enabled, developers may use their client ID to request an access token from your application.
The consuming application should make a redirect request to your application's  /oauth/authorize route like so:

Route::get('/redirect', function () {
    $query = http_build_query([
        'client_id' => 'client-id',
        'redirect_uri' => 'http://example.com/callback',
        'response_type' => 'token',
        'scope' => '',
    ]);

    return redirect('http://your-app.com/oauth/authorize?'.$query);
});
Remember, the /oauth/authorize route is already defined by the Passport::routes method. You do not need to manually define this route.

Client Credentials Grant Tokens

The client credentials grant is suitable for machine-to-machine authentication. For example, you might use this grant in a scheduled 
job which is performing maintenance tasks over an API. To retrieve a token, make a request to the oauth/token endpoint:

$guzzle = new GuzzleHttp\Client;

$response = $guzzle->post('http://your-app.com/oauth/token', [
    'form_params' => [
        'grant_type' => 'client_credentials',
        'client_id' => 'client-id',
        'client_secret' => 'client-secret',
        'scope' => 'your-scope',
    ],
]);

echo json_decode((string) $response->getBody(), true);

Personal Access Tokens

Sometimes, your users may want to issue access tokens to themselves without going through the typical authorization code redirect flow.
Allowing users to issue tokens to themselves via your application's UI can be useful for allowing users to experiment with your API or
may serve as a simpler approach to issuing access tokens in general.

Personal access tokens are always long-lived. Their lifetime is not modified when using the tokensExpireIn or refreshTokensExpireIn
methods.

Creating A Personal Access Client

Before your application can issue personal access tokens, you will need to create a personal access client. You may do this using the
passport:client command with the --personal option. If you have already run the passport:install command, you do not need to run this
command:

php artisan passport:client --personal

Managing Personal Access Tokens

Once you have created a personal access client, you may issue tokens for a given user using the  createToken method on the User
model instance. The createToken method accepts the name of the token as its first argument and an optional array of scopes as its
second argument:

$user = App\User::find(1);

// Creating a token without scopes...
$token = $user->createToken('Token Name')->accessToken;

// Creating a token with scopes...
$token = $user->createToken('My Token', ['place-orders'])->accessToken;
JSON API

Passport also includes a JSON API for managing personal access tokens. You may pair this with your own frontend to offer your users a
dashboard for managing personal access tokens. Below, we'll review all of the API endpoints for managing personal access tokens.
For convenience, we'll use Axios to demonstrate making HTTP requests to the endpoints.

If you don't want to implement the personal access token frontend yourself, you can use the frontend quickstart to have a fully 
functional frontend in a matter of minutes.
GET /oauth/scopes

This route returns all of the scopes defined for your application. You may use this route to list the scopes a user may assign to a 
personal access token:

axios.get('/oauth/scopes')
    .then(response => {
        console.log(response.data);
    });
GET /oauth/personal-access-tokens

This route returns all of the personal access tokens that the authenticated user has created. This is primarily useful for listing 
all of the user's token so that they may edit or delete them:

axios.get('/oauth/personal-access-tokens')
    .then(response => {
        console.log(response.data);
    });
POST /oauth/personal-access-tokens

This route creates new personal access tokens. It requires two pieces of data: the token's name and the scopes that should be assigned
to the token:

const data = {
    name: 'Token Name',
    scopes: []
};

axios.post('/oauth/personal-access-tokens', data)
    .then(response => {
        console.log(response.data.accessToken);
    })
    .catch (response => {
        // List errors on response...
    });
DELETE /oauth/personal-access-tokens/{token-id}

This route may be used to delete personal access tokens:

axios.delete('/oauth/personal-access-tokens/' + tokenId);

Protecting Routes


Via Middleware

Passport includes an authentication guard that will validate access tokens on incoming requests. Once you have configured the api
guard to use the passport driver, you only need to specify the  auth:api middleware on any routes that require a valid access token:

Route::get('/user', function () {
    //
})->middleware('auth:api');

Passing The Access Token

When calling routes that are protected by Passport, your application's API consumers should specify their access token as a Bearer 
token in the Authorization header of their request. For example, when using the Guzzle HTTP library:

$response = $client->request('GET', '/api/user', [
    'headers' => [
        'Accept' => 'application/json',
        'Authorization' => 'Bearer '.$accessToken,
    ],
]);

Token Scopes


Defining Scopes

Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account. For example,
if you are building an e-commerce application, not all API consumers will need the ability to place orders. Instead, you may allow the 
consumers to only request authorization to access order shipment statuses. In other words, scopes allow your application's users to 
limit the actions a third-party application can perform on their behalf.

You may define your API's scopes using the Passport::tokensCan method in the boot method of your AuthServiceProvider.
The tokensCan method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be
displayed to users on the authorization approval screen:

use Laravel\Passport\Passport;

Passport::tokensCan([
    'place-orders' => 'Place orders',
    'check-status' => 'Check order status',
]);

Assigning Scopes To Tokens

When Requesting Authorization Codes

When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the scope query
string parameter. The scope parameter should be a space-delimited list of scopes:

Route::get('/redirect', function () {
    $query = http_build_query([
        'client_id' => 'client-id',
        'redirect_uri' => 'http://example.com/callback',
        'response_type' => 'code',
        'scope' => 'place-orders check-status',
    ]);

    return redirect('http://your-app.com/oauth/authorize?'.$query);
});
When Issuing Personal Access Tokens

If you are issuing personal access tokens using the User model's createToken method, you may pass the array of desired scopes as the 
second argument to the method:

$token = $user->createToken('My Token', ['place-orders'])->accessToken;

Checking Scopes

Passport includes two middleware that may be used to verify that an incoming request is authenticated with a token that has been 
granted a given scope. To get started, add the following middleware to the $routeMiddleware property of your app/Http/Kernel.php file:

'scopes' => \Laravel\Passport\Http\Middleware\CheckScopes::class,
'scope' => \Laravel\Passport\Http\Middleware\CheckForAnyScope::class,
Check For All Scopes

The scopes middleware may be assigned to a route to verify that the incoming request's access token has all of the listed scopes:

Route::get('/orders', function () {
    // Access token has both "check-status" and "place-orders" scopes...
})->middleware('scopes:check-status,place-orders');
Check For Any Scopes

The scope middleware may be assigned to a route to verify that the incoming request's access token has at least one of the listed 
scopes:

Route::get('/orders', function () {
    // Access token has either "check-status" or "place-orders" scope...
})->middleware('scope:check-status,place-orders');
Checking Scopes On A Token Instance

Once an access token authenticated request has entered your application, you may still check if the token has a given scope using the
tokenCan method on the authenticated User instance:

use Illuminate\Http\Request;

Route::get('/orders', function (Request $request) {
    if ($request->user()->tokenCan('place-orders')) {
        //
    }
});

Consuming Your API With JavaScript

When building an API, it can be extremely useful to be able to consume your own API from your JavaScript application. This approach 
to API development allows your own application to consume the same API that you are sharing with the world. The same API may be 
consumed by your web application, mobile applications, third-party applications, and any SDKs that you may publish on various package
managers.

Typically, if you want to consume your API from your JavaScript application, you would need to manually send an access token to the
application and pass it with each request to your application. However, Passport includes a middleware that can handle this for you.
All you need to do is add the  CreateFreshApiToken middleware to your web middleware group:

'web' => [
    // Other middleware...
    \Laravel\Passport\Http\Middleware\CreateFreshApiToken::class,
],
This Passport middleware will attach a laravel_token cookie to your outgoing responses. This cookie contains an encrypted JWT that 
Passport will use to authenticate API requests from your JavaScript application. Now, you may make requests to your application's API
without explicitly passing an access token:

axios.get('/user')
    .then(response => {
        console.log(response.data);
    });
When using this method of authentication, Axios will automatically send the X-CSRF-TOKEN header. In addition, the default Laravel 
JavaScript scaffolding instructs Axios to send the X-Requested-With header:

window.axios.defaults.headers.common = {
    'X-Requested-With': 'XMLHttpRequest',
};
If you are using a different JavaScript framework, you should make sure it is configured to send the X-CSRF-TOKEN and X-Requested-With
headers with every outgoing request.

Events

Passport raises events when issuing access tokens and refresh tokens. You may use these events to prune or revoke other access tokens
in your database. You may attach listeners to these events in your application's EventServiceProvider:

/**
 * The event listener mappings for the application.
 *
 * @var array
 */
protected $listen = [
    'Laravel\Passport\Events\AccessTokenCreated' => [
        'App\Listeners\RevokeOldTokens',
    ],

    'Laravel\Passport\Events\RefreshTokenCreated' => [
        'App\Listeners\PruneOldTokens',
    ],
];

Testing

Passport's actingAs method may be used to specify the currently authenticated user as well as its scopes. The first argument
given to the actingAs method is the user instance and the second is an array of scopes that should be granted to the user's token:

public function testServerCreation()
{
    Passport::actingAs(
        factory(User::class)->create(),
        ['create-servers']
    );

    $response = $this->post('/api/create-server');

    $response->assertStatus(200);
}
